type Movie{plot: String,poster: String,title: String} type Movie @exclude(operations: [CREATE, UPDATE, DELETE]) {
  budget: Int
  countries: [String]
  imdbId: ID
  imdbRating: Float
  imdbVotes: Int
  languages: [String]
  movieId: ID!
  plot: String
  poster: String
  released: String
  revenue: Int
  runtime: Int
  title: String
  tmdbId: String
  url: String
  year: Int
  genres: [Genre!]! @relationship(type: "IN_GENRE", direction: OUT)
  actors: [Actor!]! @relationship(type: "ACTED_IN", direction: IN)
  directors: [Director!]! @relationship(type: "DIRECTED", direction: IN)
  similar(first: Int = 4): [Movie]
    @cypher(
      statement: """
      MATCH (this)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(overlap)-[:ACTED_IN|:DIRECTED|:IN_GENRE]-(rec:Movie)
      WITH rec, COUNT(*) AS score
      RETURN rec ORDER BY score DESC LIMIT $first
      """
    )
}

type Genre @exclude(operations: [CREATE, UPDATE, DELETE]) {
  name: String
  movies: [Movie!]! @relationship(type: "IN_GENRE", direction: IN)
}

type User @exclude(operations: [CREATE, UPDATE, DELETE]) {
  userId: ID!
  name: String
  rated: [Movie!]! @relationship(type: "RATED", direction: OUT)
}

type Actor @exclude(operations: [CREATE, UPDATE, DELETE]) {
  bio: String
  born: Date
  bornIn: String
  imdbIb: String
  name: String
  poster: String
  tmdbId: String
  url: String
  acted_in: [Movie!]! @relationship(type: "ACTED_IN", direction: OUT)
}

type Director @exclude(operations: [CREATE, UPDATE, DELETE]) {
  bio: String
  bornIn: String
  imdbIb: String
  name: String
  poster: String
  tmdbId: String
  url: String
  directed: [Movie!]! @relationship(type: "DIRECTED", direction: OUT)
}

type Query {
  movieCount: Int! @cypher(statement: "MATCH (m:Movie) RETURN COUNT(m)")
}
